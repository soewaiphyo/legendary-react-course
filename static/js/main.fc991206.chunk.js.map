{"version":3,"sources":["logo.svg","cat-component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CatContainer","cat","Card","style","marginBottom","CardContent","displ","src","profileUrl","maxWidth","textAlign","name","age","eyeColor","Cat","this","App","cats","className","width","margin","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,+ICuB5BC,EAnBM,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACtB,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,aAAc,KAC3B,kBAACC,EAAA,EAAD,KACE,6BACE,6BACE,yBAAKC,OAAK,EAACC,IAAKN,EAAIO,WAAYL,MAAO,CAAEM,SAAU,UACnD,yBAAKN,MAAO,CAAEO,UAAW,SACvB,uCAAaT,EAAIU,MACjB,sCAAYV,EAAIW,KAChB,4CAAkBX,EAAIY,gBCP9BC,EACJ,WAAYH,EAAMC,EAAKC,EAAUL,GAAa,oBAC5CO,KAAKJ,KAAOA,EACZI,KAAKH,IAAMA,EACXG,KAAKF,SAAWA,EAChBE,KAAKP,WAAaA,GA8CPQ,MA1Cf,WACE,IAoBMC,EAAO,CApBA,IAAIH,EACf,WACA,EACA,QACA,yJAEW,IAAIA,EACf,YACA,EACA,SACA,+HAGW,IAAIA,EACf,YACA,EACA,SACA,gIAKF,OACE,yBAAKI,UAAU,OACb,2CACA,yBAAKf,MAAO,CAAEgB,MAAO,SACnB,yBACEhB,MAAO,CACLM,SAAU,QACVW,OAAQ,WAGTH,EAAKI,KAAI,SAACpB,GAAD,OACR,kBAAC,EAAD,CAAcA,IAAKA,WCtCXqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc991206.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\nconst CatContainer = ({ cat }) => {\r\n  return (\r\n    <Card style={{ marginBottom: 20 }}>\r\n      <CardContent>\r\n        <div>\r\n          <div>\r\n            <img displ src={cat.profileUrl} style={{ maxWidth: \"100%\" }}></img>\r\n            <div style={{ textAlign: \"left\" }}>\r\n              <div> Name: {cat.name}</div>\r\n              <div> Age: {cat.age}</div>\r\n              <div> Eye Color: {cat.eyeColor}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CatContainer;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nimport CatContainer from \"./cat-component\";\r\n\r\nclass Cat {\r\n  constructor(name, age, eyeColor, profileUrl) {\r\n    this.name = name;\r\n    this.age = age;\r\n    this.eyeColor = eyeColor;\r\n    this.profileUrl = profileUrl;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const catA = new Cat(\r\n    \"Phyu lay\",\r\n    2,\r\n    \"green\",\r\n    \"https://static.scientificamerican.com/sciam/cache/file/92E141F8-36E4-4331-BB2EE42AC8674DD3_source.jpg?w=590&h=800&62C6A28D-D2CA-4635-AA7017C94E6DDB72\"\r\n  );\r\n  const catB = new Cat(\r\n    \"MeeNyoung\",\r\n    7,\r\n    \"yellow\",\r\n    \"https://www.humanesociety.org/sites/default/files/styles/1240x698/public/2018/08/kitten-440379.jpg?h=c8d00152&itok=1fdekAh2\"\r\n  );\r\n\r\n  const catC = new Cat(\r\n    \"MeeNyoung\",\r\n    7,\r\n    \"yellow\",\r\n    \"https://www.humanesociety.org/sites/default/files/styles/1240x698/public/2018/08/kitten-440379.jpg?h=c8d00152&itok=1fdekAh2\"\r\n  );\r\n\r\n  const cats = [catA, catB, catC];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Cat Listing</h1>\r\n      <div style={{ width: \"100%\" }}>\r\n        <div\r\n          style={{\r\n            maxWidth: \"600px\",\r\n            margin: \"0 auto\",\r\n          }}\r\n        >\r\n          {cats.map((cat) => (\r\n            <CatContainer cat={cat} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}